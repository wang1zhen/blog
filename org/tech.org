#+hugo_base_dir: ../
#+hugo_section: tech
#+STARTUP: overview

* DONE Installation of Arch Linux with btrfs and snapper 基于 btrfs 与 snapper 安装 Arch Linux
  CLOSED: [2024-07-17 Wed 09:39]
  :PROPERTIES:
  :EXPORT_FILE_NAME: install-arch-btrfs
  :END:

** 启动 Live ISO 并连接 Wi-Fi
   1. 启动到 Arch Linux Live 环境。
   2. 设置 root 密码：

      #+BEGIN_SRC sh
        passwd
      #+END_SRC

   3. 使用 nmtui 连接 Wi-Fi：

      #+BEGIN_SRC sh
        nmtui
      #+END_SRC

   4. 查看 IP 地址：

      #+BEGIN_SRC sh
        ip addr show
      #+END_SRC

** 安装并启用 OpenSSH 服务器
   1. 在 Live 环境中安装 OpenSSH 服务器：

      #+BEGIN_SRC sh
        pacman -Sy
        pacman -S openssh
      #+END_SRC

   2. 启用并启动 SSH 服务：

      #+BEGIN_SRC sh
        systemctl start sshd
      #+END_SRC

   3. 确认 SSH 服务正在运行：

      #+BEGIN_SRC sh
        systemctl status sshd
      #+END_SRC

   4. 从远程机器 ssh 连接到 Arch Live ISO

** 分区硬盘
   使用 sgdisk 进行分区:

   假设硬盘是 /dev/nvme0n1：

   #+BEGIN_SRC sh
     sgdisk -Z /dev/nvme0n1  # 清除所有分区
     sgdisk -n 1:0:+512M -t 1:ef00 /dev/nvme0n1  # 创建EFI分区
     sgdisk -n 2:0:0 -t 2:8300 /dev/nvme0n1  # 创建剩余空间的btrfs分区
   #+END_SRC

** 格式化分区
   1. 格式化 EFI 分区为 FAT32：

      #+BEGIN_SRC sh
        mkfs.vfat -F32 /dev/nvme0n1p1
      #+END_SRC

   2. 格式化 btrfs 分区：

      #+BEGIN_SRC sh
        mkfs.btrfs /dev/nvme0n1p2
      #+END_SRC

** 创建并挂载 subvolume
   1. 挂载 btrfs 分区：

      #+BEGIN_SRC sh
        mount /dev/nvme0n1p2 /mnt
      #+END_SRC

   2. 创建 subvolume：

      #+BEGIN_SRC sh
        btrfs subvolume create /mnt/@
        btrfs subvolume create /mnt/@home
        btrfs subvolume create /mnt/@snapshots
        btrfs subvolume create /mnt/@var_log
        btrfs subvolume create /mnt/@var_cache
        btrfs subvolume create /mnt/@var_tmp
        btrfs subvolume create /mnt/@swap
      #+END_SRC

   3. 卸载 btrfs 分区：

      #+BEGIN_SRC sh
        umount /mnt
      #+END_SRC

   4. 重新挂载 subvolume：

      #+BEGIN_SRC sh
        mount -o subvol=@,noatime,compress=zstd /dev/nvme0n1p2 /mnt
        mkdir -p /mnt/{home,.snapshots,var/log,var/cache,var/tmp,boot/efi,swap}
        mount -o subvol=@home,noatime,compress=zstd /dev/nvme0n1p2 /mnt/home
        mount -o subvol=@snapshots,noatime,compress=zstd /dev/nvme0n1p2 /mnt/.snapshots
        mount -o subvol=@var_log,noatime,compress=zstd /dev/nvme0n1p2 /mnt/var/log
        mount -o subvol=@var_cache,noatime,compress=zstd /dev/nvme0n1p2 /mnt/var/cache
        mount -o subvol=@var_tmp,noatime,compress=zstd /dev/nvme0n1p2 /mnt/var/tmp
        mount -o subvol=@swap,noatime /dev/nvme0n1p2 /mnt/swap
        mount /dev/nvme0n1p1 /mnt/boot/efi
      #+END_SRC

** 创建 swapfile
   1. 创建 swapfile：

      #+BEGIN_SRC sh
        btrfs filesystem mkswapfile --size 32g --uuid clear /mnt/swap/swapfile
      #+END_SRC

   2. 启用 swapfile：

      #+BEGIN_SRC sh
        chmod 600 /mnt/swap/swapfile
        mkswap /mnt/swap/swapfile
        swapon /mnt/swap/swapfile
      #+END_SRC

** 安装基础系统
   1. 安装基础系统：

      #+BEGIN_SRC sh
        pacstrap /mnt base linux linux-firmware
      #+END_SRC

** 配置系统
   1. 生成 fstab：

      #+BEGIN_SRC sh
        genfstab -U /mnt >> /mnt/etc/fstab
      #+END_SRC

   2. 检查 fstab：

      #+begin_src sh
        vim /mnt/etc/fstab
      #+end_src

   3. 切换到新系统的 chroot 环境：

      #+BEGIN_SRC sh
        arch-chroot /mnt
      #+END_SRC

   4. 设置基本配置：

      #+BEGIN_SRC sh
        echo "hostname" > /etc/hostname
        echo "127.0.0.1 localhost" > /etc/hosts
        echo "127.0.1.1 hostname.localdomain hostname" >> /etc/hosts

        ln -sf /usr/share/zoneinfo/Region/City /etc/localtime
        hwclock --systohc

        pacman -S networkmanager grub efibootmgr btrfs-progs snapper vim
      #+END_SRC

   5. 配置 locale：

      #+BEGIN_SRC sh
        vim /etc/locale.gen
      #+END_SRC

      在文件中取消注释行：

      #+BEGIN_SRC text
        en_US.UTF-8 UTF-8
      #+END_SRC

      生成 locale：

      #+BEGIN_SRC sh
        locale-gen
      #+END_SRC

      设置系统的默认语言环境：

      #+BEGIN_SRC sh
        echo "LANG=en_US.UTF-8" > /etc/locale.conf
      #+END_SRC

   6. 安装 ssh server
      #+begin_src sh
        pacman -S openssh
        systemctl enable sshd
      #+end_src

   7. 安装 KDE Plasma 桌面环境和 Wayland 支持：

      #+BEGIN_SRC sh
        pacman -S plasma-meta sudo
        systemctl enable NetworkManager
      #+END_SRC

   8. 配置 grub：

      #+BEGIN_SRC sh
        grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB
        grub-mkconfig -o /boot/grub/grub.cfg
      #+END_SRC

   9. 创建新用户并加入 sudo 组：

      #+BEGIN_SRC sh
        useradd -m -G wheel username
        passwd username
      #+END_SRC

   10. 允许 sudo 组成员使用 sudo 命令：

       #+BEGIN_SRC sh
         EDITOR=vim visudo
       #+END_SRC

       在文件中添加以下行：

       #+BEGIN_SRC text
         %wheel ALL=(ALL) NOPASSWD: ALL
       #+END_SRC

   11. 退出 chroot 环境并卸载临时文件系统：

       #+BEGIN_SRC sh
         exit
         umount -R /mnt
       #+END_SRC

** 完成安装并重启
   1. 重启系统以验证配置是否正确。

      #+BEGIN_SRC sh
        reboot
      #+END_SRC

** 配置 Snapper
   1. sudo
      #+begin_src shell
        sudo -i
      #+end_src

   1. 启动进入新安装的 Arch 系统后，安装 Snapper 和相关包：

      #+BEGIN_SRC sh
        pacman -S snapper snap-pac grub-btrfs snap-pac-grub
      #+END_SRC

   2. 初始化 Snapper 配置：

      #+BEGIN_SRC sh
        umount /.snapshots
        rm -r /.snapshots
        snapper -c root create-config /
        btrfs subvolume delete /.snapshots
        mkdir /.snapshots
        mount -a
        chmod 750 /.snapshots
        snapper -c home create-config /home
      #+END_SRC

   3. 编辑 Snapper 配置文件 /etc/snapper/configs/root 和 /etc/snapper/configs/home，设置快照策略：

      #+BEGIN_SRC sh
        vim /etc/snapper/configs/root
      #+END_SRC

      在配置文件中，设置以下参数：

      #+BEGIN_SRC text
        TIMELINE_CREATE="yes"
        TIMELINE_CLEANUP="yes"
        TIMELINE_MIN_AGE="1800"
        TIMELINE_LIMIT_HOURLY="24"
        TIMELINE_LIMIT_DAILY="7"
        TIMELINE_LIMIT_WEEKLY="4"
        TIMELINE_LIMIT_MONTHLY="3"
      #+END_SRC

      类似地，编辑 /etc/snapper/configs/home：

      #+BEGIN_SRC sh
        vim /etc/snapper/configs/home
      #+END_SRC

      设置相同的快照策略：

      #+BEGIN_SRC text
        TIMELINE_CREATE="yes"
        TIMELINE_CLEANUP="yes"
        TIMELINE_MIN_AGE="1800"
        TIMELINE_LIMIT_HOURLY="24"
        TIMELINE_LIMIT_DAILY="7"
        TIMELINE_LIMIT_WEEKLY="4"
        TIMELINE_LIMIT_MONTHLY="3"
      #+END_SRC

   4. 允许所有 sudo 组的成员管理 Snapper 快照：

      #+BEGIN_SRC sh
        vim /etc/snapper/configs/root
      #+END_SRC

      找到 ALLOW_USERS 和 ALLOW_GROUPS，修改为：

      #+BEGIN_SRC text
        ALLOW_USERS=""
        ALLOW_GROUPS="sudo"
      #+END_SRC

      类似地，编辑 /etc/snapper/configs/home：

      #+BEGIN_SRC sh
        vim /etc/snapper/configs/home
      #+END_SRC

      修改为：

      #+BEGIN_SRC text
        ALLOW_USERS=""
        ALLOW_GROUPS="sudo"
      #+END_SRC

   5. 配置 grub-btrfs
      #+begin_src shell
        vim /etc/default/grub-btrfs/config
      #+end_src

      修改：

      #+begin_example
        GRUB_BTRFS_LIMIT="5000"
      #+end_example

      6. 启用并启动 snapper-timeline 和 snapper-cleanup 定时任务：

      #+BEGIN_SRC sh
        systemctl enable snapper-timeline.timer
        systemctl start snapper-timeline.timer
        systemctl enable snapper-cleanup.timer
        systemctl start snapper-cleanup.timer
      #+END_SRC

   7. 手动生成一个 Snapper 快照：

      #+BEGIN_SRC sh
        snapper -c root create --description "Initial snapshot"
      #+END_SRC

* DONE 为 Linux 系统启用 zram
  CLOSED: [2024-07-22 Mon 14:08]
  :PROPERTIES:
  :EXPORT_FILE_NAME: linux-enable-zram
  :END:

  在 linux 系统中使用 zram 可以对内存进行压缩（现代 CPU 下几乎即时），提升表现。

** zram-generator

*** 安装
    #+begin_src shell
      sudo pacman -S zram-generator
    #+end_src

*** 配置 systemd service
    =/etc/systemd/zram-generator.conf=
    #+begin_example
      [zram0]
      zram-size = ram / 2
      compression-algorithm = zstd
    #+end_example

*** systemd
    #+begin_src shell
      sudo systemctl daemon-reload
      sudo systemctl start systemd-zram-setup@zram0.service
    #+end_src

*** 优化
    =/etc/sysctl.d/99-vm-zram-parameters.conf=
    #+begin_example
      vm.swappiness = 200
      vm.watermark_boost_factor = 0
      vm.watermark_scale_factor = 125
      vm.page-cluster = 0
    #+end_example



* DONE 在 Debian 稳定版中通过 APT Pinning 安装特定的 Sid 软件包
  CLOSED: [2024-08-03 Sat 19:45]
  :PROPERTIES:
  :EXPORT_FILE_NAME: debian-install-package-from-sid-with-apt-pinning
  :END:

  为了在 Debian 稳定版中安装特定来自 Sid 的软件包，同时保持系统的整体稳定性，可以通过 APT Pinning 来实现精细化的版本控制。

** 配置 APT Pinning

   在 =/etc/apt/preferences.d/sid= 中设置优先级。

   #+begin_example
     Package: *
     Pin: release a=stable
     Pin-Priority: 900

     Package: *
     Pin: release a=stable-updates
     Pin-Priority: 900

     Package: *
     Pin: release a=stable-security
     Pin-Priority: 900

     Package: *
     Pin: release a=stable-backports
     Pin-Priority: 800

     Package: *
     Pin: release a=unstable
     Pin-Priority: 100
   #+end_example

** 只对特定包从 sid 更新
   =/etc/apt/preferences.d/sid=
   #+begin_example
     Package: emacs-pgtk hugo eza
     Pin: release a=unstable
     Pin-Priority: 1001
   #+end_example
** 应用

   #+begin_src bash
     sudo apt update
     apt list --upgradable
     apt policy <some-package>
   #+end_src
